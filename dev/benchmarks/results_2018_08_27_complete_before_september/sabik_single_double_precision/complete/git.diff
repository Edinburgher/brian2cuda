diff --git a/brian2cuda/brianlib/cuda_utils.h b/brian2cuda/brianlib/cuda_utils.h
index d88c029..f41c765 100644
--- a/brian2cuda/brianlib/cuda_utils.h
+++ b/brian2cuda/brianlib/cuda_utils.h
@@ -40,6 +40,16 @@ inline void _cudaSafeCall(cudaError err, const char *file, const int line, const
 
 inline void _cudaCheckError(const char *file, const int line, const char *msg)
 {
+#ifdef BRIAN2CUDA_ERROR_CHECK_BLOCKING
+    // More careful checking. However, this will affect performance.
+    cudaError err = cudaDeviceSynchronize();
+    if(cudaSuccess != err)
+    {
+        fprintf(stderr, "ERROR: CUDA_CHECK_ERROR() failed after %s at %s:%i : %s\n",
+                msg, file, line, cudaGetErrorString(err));
+        exit(-1);
+    }
+#else
 #ifdef BRIAN2CUDA_ERROR_CHECK
     cudaError err = cudaGetLastError();
     if (cudaSuccess != err)
@@ -49,16 +59,6 @@ inline void _cudaCheckError(const char *file, const int line, const char *msg)
         exit(-1);
     }
 
-#else
-#ifdef BRIAN2CUDA_ERROR_CHECK_BLOCKING
-    // More careful checking. However, this will affect performance.
-    err = cudaDeviceSynchronize();
-    if(cudaSuccess != err)
-    {
-        fprintf(stderr, "ERROR: CUDA_CHECK_ERROR() failed after %s at %s:%i : %s\n",
-                msg, file, line, cudaGetErrorString(err));
-        exit(-1);
-    }
 #endif
 #endif
 
diff --git a/brian2cuda/templates/main.cu b/brian2cuda/templates/main.cu
index 394cc70..2985f02 100644
--- a/brian2cuda/templates/main.cu
+++ b/brian2cuda/templates/main.cu
@@ -27,6 +27,9 @@ int main(int argc, char **argv)
 
     const std::clock_t _start_time2 = std::clock();
 
+    const char* env_cu = std::getenv("CUDA_VISIBLE_DEVICES");
+    printf("CUDA_VISIBLE_DEVICES is %s\n", env_cu);
+
     cudaDeviceProp props;
     CUDA_SAFE_CALL(
             cudaGetDeviceProperties(&props, 0)
diff --git a/brian2cuda/tests/features/cuda_configuration.py b/brian2cuda/tests/features/cuda_configuration.py
index 2204571..cf8d5a3 100644
--- a/brian2cuda/tests/features/cuda_configuration.py
+++ b/brian2cuda/tests/features/cuda_configuration.py
@@ -31,10 +31,18 @@ class CUDAStandaloneConfigurationBase(Configuration):
         brian2.set_device('cuda_standalone', build_on_run=False,
                           **self.device_kwargs)
         if socket.gethostname() == 'elnath':
-            if prefs['devices.cpp_standalone.extra_make_args_unix'] == ['-j12']:
-                prefs['devices.cpp_standalone.extra_make_args_unix'] = ['-j24']
             prefs['codegen.cuda.extra_compile_args_nvcc'].remove('-arch=sm_35')
             prefs['codegen.cuda.extra_compile_args_nvcc'].extend(['-arch=sm_20'])
+        elif socket.gethostname() == 'sabik':
+            try:
+                dev_no = int(os.environ['CUDA_VISIBLE_DEVICES'])
+            except KeyError:
+                # uses first GPU by default
+                dev_no = 0
+            dev_no_to_cc = {0: '61', 1: '52'}
+            cc = dev_no_to_cc[dev_no]
+            prefs['codegen.cuda.extra_compile_args_nvcc'].remove('-arch=sm_35')
+            prefs['codegen.cuda.extra_compile_args_nvcc'].extend(['-arch=sm_{}'.format(cc)])
 
     def after_run(self):
         if os.path.exists('cuda_standalone'):
diff --git a/brian2cuda/tests/features/speed.py b/brian2cuda/tests/features/speed.py
index 0321ac4..8a7c469 100644
--- a/brian2cuda/tests/features/speed.py
+++ b/brian2cuda/tests/features/speed.py
@@ -35,7 +35,8 @@ __all__.extend(['AdaptationOscillation',
                 'STDPNeuronalTraces',
                 'STDPMultiPostNeuronalTraces',
                 'Vogels',
-                'VogelsWithSynapticDynamic'
+                'VogelsWithSynapticDynamic',
+                'MushroomBody'
                ])
 
 
@@ -1134,6 +1135,7 @@ class Vogels(SpeedTest):
         con_ie.w = 1e-10
         self.timed_run(self.duration)
 
+
 class VogelsWithSynapticDynamic(SpeedTest):
 
     category = "Full examples"
@@ -1199,6 +1201,213 @@ class VogelsWithSynapticDynamic(SpeedTest):
 
 
 
+class MushroomBody(SpeedTest):
+
+    category = "Full examples"
+    name = "Mushroom Body example from brian2GeNN benchmarks"
+    tags = ["Neurons", "Synapses"]
+    # scaling values taken from brian2GeNN benchmark
+    scaling =  [0.05, 0.1, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
+    n_range =  (2500 * array(scaling)).astype('int')
+    #n_range = [10, 100, 1000, 10000, 20000, 50000, 100000, 112500]  #fail: 118750
+    n_label = 'Num neurons'
+
+    # configuration options (adapted form brian2GeNN benchmark)
+    run_it_for = 1
+    n_patterns = 10
+    n_repeats = run_it_for * 10
+    duration = (n_patterns * n_repeats + 1) * 50*ms
+
+    def run(self):
+        import random as py_random
+        N_MB = self.n
+        #MB_scaling = N_MB/float(2500)
+        #defaultclock.dt = 0.1*ms
+        # Number of neurons
+        N_AL = 100
+        N_LB = 100
+        # Constants
+        g_Na = 7.15*uS
+        E_Na = 50*mV
+        g_K = 1.43*uS
+        E_K = -95*mV
+        g_leak = 0.0267*uS
+        E_leak = -63.56*mV
+        C = 0.3*nF
+        VT = -63*mV
+        # Those two constants are dummy constants, only used when populations only have
+        # either inhibitory or excitatory inputs
+        E_e = 0*mV
+        E_i = -92*mV
+        # Actual constants used for synapses
+        NKCKC= N_MB
+        if (NKCKC > 10000):
+            NKCKC= 10000
+        g_scaling = NKCKC/2500
+        #print(g_scaling)
+        if (g_scaling < 1):
+            g_scaling= 1
+        tau_PN_LHI = 1*ms
+        tau_LHI_iKC = 3*ms
+        tau_PN_iKC = 2*ms
+        tau_iKC_eKC = 10*ms
+        tau_eKC_eKC = 5*ms
+        w_LHI_iKC = 8.75*nS
+        w_eKC_eKC = 75*nS
+        tau_pre = tau_post = 10*ms
+        dApre = 0.1*nS/g_scaling
+        dApost = -dApre
+        # tau_STDP = 10*ms
+        # g_0 = 0.125*nS
+        g_max = 3.75*nS/g_scaling
+        # g_mid = g_max/2
+        # g_slope = g_mid
+        # tau_decay = 10e5*ms
+        # A = g_max/4
+        # offset = 0.01*A
+
+        scale = .675
+
+        traub_miles = '''
+        dV/dt = -(1/C)*(g_Na*m**3*h*(V - E_Na) +
+                        g_K*n**4*(V - E_K) +
+                        g_leak*(V - E_leak) +
+                        I_syn) : volt
+        dm/dt = alpha_m*(1 - m) - beta_m*m : 1
+        dn/dt = alpha_n*(1 - n) - beta_n*n : 1
+        dh/dt = alpha_h*(1 - h) - beta_h*h : 1
+        alpha_m = 0.32*(mV**-1)*(13*mV-V+VT)/
+                 (exp((13*mV-V+VT)/(4*mV))-1.)/ms : Hz
+        beta_m = 0.28*(mV**-1)*(V-VT-40*mV)/
+                (exp((V-VT-40*mV)/(5*mV))-1)/ms : Hz
+        alpha_h = 0.128*exp((17*mV-V+VT)/(18*mV))/ms : Hz
+        beta_h = 4./(1+exp((40*mV-V+VT)/(5*mV)))/ms : Hz
+        alpha_n = 0.032*(mV**-1)*(15*mV-V+VT)/
+                 (exp((15*mV-V+VT)/(5*mV))-1.)/ms : Hz
+        beta_n = .5*exp((10*mV-V+VT)/(40*mV))/ms : Hz
+        '''
+
+        #alpha_m = 0.32*(-52 - V/mV)/(exp((-52 - V/mV)/4) - 1)/ms: Hz
+        #beta_m = 0.28*(25 + V/mV)/(exp((25 + V/mV)/5) - 1)/ms: Hz
+        #alpha_h = 0.128*exp((-48 - V/mV)/18)/ms: Hz
+        #beta_h = 4/(exp((-25 - V/mV)/5) + 1)/ms : Hz
+        #alpha_n = 0.032*(-50 - V/mV)/(exp((-50 - V/mV)/5) - 1)/ms: Hz
+        #beta_n = 0.5*exp((-55 - V/mV)/40)/ms : Hz
+
+        # Principal neurons (Antennal Lobe)
+        n_patterns = self.n_patterns
+        n_repeats = self.n_repeats
+        runtime = (n_patterns*n_repeats+1)*50*ms
+        p_perturb = 0.1
+        patterns = np.repeat(np.array([np.random.choice(N_AL, int(0.2*N_AL), replace=False) for _ in range(n_patterns)]), n_repeats, axis=0)
+        # Make variants of the patterns
+        to_replace = np.random.binomial(int(0.2*N_AL), p=p_perturb, size=n_patterns*n_repeats)
+        variants = []
+        for idx, variant in enumerate(patterns):
+            np.random.shuffle(variant)
+            if to_replace[idx] > 0:
+                variant = variant[:-to_replace[idx]]
+            new_indices = np.random.randint(N_AL, size=to_replace[idx])
+            variant = np.unique(np.concatenate([variant, new_indices]))
+            variants.append(variant)
+
+        training_size = (n_repeats-10)
+        training_variants = []
+        for p in range(n_patterns):
+            training_variants.extend(variants[n_repeats * p:n_repeats * p + training_size])
+        py_random.shuffle(training_variants)
+        sorted_variants = list(training_variants)
+        for p in range(n_patterns):
+            sorted_variants.extend(variants[n_repeats * p + training_size:n_repeats * (p + 1)])
+
+        # all_patterns = np.zeros((n_patterns*n_repeats, N_AL))
+        # for idx, p in enumerate(sorted_variants):
+        #     all_patterns[idx, p] = 1
+        # plt.imshow(all_patterns[-10*n_patterns:, :], interpolation='none')
+        # plt.show()
+
+        spike_times = np.arange(n_patterns*n_repeats)*50*ms + 1*ms + rand(n_patterns*n_repeats)*2*ms
+        spike_times = spike_times.repeat([len(p) for p in sorted_variants])
+        spike_indices = np.concatenate(sorted_variants)
+
+        PN = SpikeGeneratorGroup(N_AL, spike_indices, spike_times)
+
+        # iKC of the mushroom body
+        I_syn = '''I_syn = g_PN_iKC*(V - E_e): amp
+                   dg_PN_iKC/dt = -g_PN_iKC/tau_PN_iKC : siemens'''
+        eqs_iKC = Equations(traub_miles) + Equations(I_syn)
+        iKC = NeuronGroup(N_MB, eqs_iKC, threshold='V>0*mV', refractory='V>0*mV',
+                          method='exponential_euler')
+        iKC.V = E_leak
+        iKC.h = 1
+        iKC.m = 0
+        iKC.n = .5
+
+        # eKCs of the mushroom body lobe
+        I_syn = '''I_syn = g_iKC_eKC*(V - E_e) + g_eKC_eKC*(V - E_i): amp
+                   dg_iKC_eKC/dt = -g_iKC_eKC/tau_iKC_eKC : siemens
+                   dg_eKC_eKC/dt = -g_eKC_eKC/tau_eKC_eKC : siemens'''
+        eqs_eKC = Equations(traub_miles) + Equations(I_syn)
+        eKC = NeuronGroup(N_LB, eqs_eKC, threshold='V>0*mV', refractory='V>0*mV',
+                          method='exponential_euler')
+        eKC.V = E_leak
+        eKC.h = 1
+        eKC.m = 0
+        eKC.n = .5
+
+        # Synapses
+        PN_iKC = Synapses(PN, iKC, 'weight : siemens', on_pre='g_PN_iKC += scale*weight')
+        PN_iKC.connect(p=0.15)
+        PN_iKC.weight = '10*nS + 1.25*nS*randn()'
+
+        # iKC_eKC = Synapses(iKC, eKC,
+        #              '''
+        #              dg_raw/dt = (g_0 - g_raw)/tau_decay : siemens (event-driven)
+        #              g_syn = g_max*(tanh((g_raw - g_mid)/g_slope) + 1)/2 : siemens
+        #              dapre/dt =  -apre/tau_stdp : siemens (event-driven)
+        #              dapost/dt = -apost/tau_stdp : siemens (event-driven)
+        #              ''',
+        #              on_pre='''
+        #                                    apre += A
+        #                                    g_iKC_eKC += g_max*(tanh((g_raw - g_mid)/g_slope) + 1)/2
+        #                     ''',
+        #              on_post='''
+        #              g_raw += apre - offset
+        #              ''')
+        iKC_eKC = Synapses(iKC, eKC,
+                           '''g_raw : siemens
+                              dApre/dt = -Apre / tau_pre : siemens (event-driven)
+                              dApost/dt = -Apost / tau_post : siemens (event-driven)
+                              ''',
+                           on_pre='''g_iKC_eKC += g_raw
+                                     Apre += dApre
+                                     g_raw = clip(g_raw + Apost, 0, g_max)
+                                     ''',
+                           on_post='''
+                                      Apost += dApost
+                                      g_raw = clip(g_raw + Apre, 0, g_max)''',
+                           )
+        if (N_MB > 10000):
+            iKC_eKC.connect(p=float(10000)/N_MB)
+        else:
+            iKC_eKC.connect()
+        # First set all synapses as "inactive", then set 20% to active
+        iKC_eKC.g_raw = 'rand()*g_max/10/g_scaling'
+        iKC_eKC.g_raw['rand() < 0.2'] = '(2.5*nS + 0.5*nS*randn())/g_scaling'
+
+        eKC_eKC = Synapses(eKC, eKC, on_pre='g_eKC_eKC += scale*w_eKC_eKC')
+        eKC_eKC.connect()
+
+        #if use_spikemon:
+        #    PN_spikes = SpikeMonitor(PN)
+        #    iKC_spikes = SpikeMonitor(iKC)
+        #    eKC_spikes = SpikeMonitor(eKC)
+
+        self.timed_run(self.duration)
+
+
+
+
 
 
 if __name__=='__main__':
diff --git a/dev/benchmarks/run_speed_tests.py b/dev/benchmarks/run_speed_tests.py
index 4792b95..b1fbfd4 100644
--- a/dev/benchmarks/run_speed_tests.py
+++ b/dev/benchmarks/run_speed_tests.py
@@ -62,90 +62,97 @@ if socket.gethostname() == 'elnath':
     prefs['codegen.cuda.extra_compile_args_nvcc'].extend(['-arch=sm_20'])
 
 configs = [# configuration                          project_directory
-          (NumpyConfiguration,                     None),
-          (WeaveConfiguration,                     None),
-          (LocalConfiguration,                     None),
+          #(NumpyConfiguration,                     None),
+          #(WeaveConfiguration,                     None),
+          #(LocalConfiguration,                     None),
+          (CUDAStandaloneConfiguration,             'cuda_standalone'),
 
-          (DynamicConfigCreator('CUDA standalone'),
-           'cuda_standalone'),
+          #(DynamicConfigCreator('CUDA standalone'),
+          # 'cuda_standalone'),
 
-          (DynamicConfigCreator('CUDA standalone bundles',
-                                git_commit='nemo_bundles'),
-           'cuda_standalone'),
+          #(DynamicConfigCreator('CUDA standalone bundles',
+          #                      git_commit='nemo_bundles'),
+          # 'cuda_standalone'),
 
-          (DynamicConfigCreator("CUDA standalone (profile='blocking')",
-                                set_device_kwargs={'profile': 'blocking'}),
-           'cuda_standalone'),
-          (DynamicConfigCreator("CUDA standalone with 2 blocks per SM",
-                                prefs={'devices.cuda_standalone.SM_multiplier': 2}),
+          #(DynamicConfigCreator("CUDA standalone (profile='blocking')",
+          #                      set_device_kwargs={'profile': 'blocking'}),
+          # 'cuda_standalone'),
+          #(DynamicConfigCreator("CUDA standalone single precision",
+          #                      prefs={'core.default_float_dtype': float32}),
+          # 'cuda_standalone'),
+
+          (DynamicConfigCreator("CUDA standalone 1 post block",
+                                prefs={'devices.cuda_standalone.parallel_blocks': 1}),
            'cuda_standalone'),
 
-          (CUDAStandaloneConfiguration,             'cuda_standalone'),
-          (CUDAStandaloneConfigurationExtraThresholdKernel,             'cuda_standalone'),
-          (CUDAStandaloneConfigurationNoAssert,             'cuda_standalone'),
-          (CUDAStandaloneConfigurationNoCudaOccupancyAPI,      'cuda_standalone'),
-          (CUDAStandaloneConfigurationNoCudaOccupancyAPIProfileCPU,    'cuda_standalone'),
-          (CUDAStandaloneConfiguration2BlocksPerSM, 'cuda_standalone'),
-          (CUDAStandaloneConfiguration2BlocksPerSMLaunchBounds, 'cuda_standalone'),
-          (CUDAStandaloneConfigurationSynLaunchBounds,     'cuda_standalone'),
-          (CUDAStandaloneConfiguration2BlocksPerSMSynLaunchBounds, 'cuda_standalone'),
-          (CUDAStandaloneConfigurationProfileGPU,   'cuda_standalone'),
-          (CUDAStandaloneConfigurationProfileCPU,   'cuda_standalone'),
-          (CPPStandaloneConfiguration,              'cpp_standalone'),
-          (GeNNConfiguration,                       'GeNNworkspace'),
+          #(CUDAStandaloneConfigurationExtraThresholdKernel,             'cuda_standalone'),
+          #(CUDAStandaloneConfigurationNoAssert,             'cuda_standalone'),
+          #(CUDAStandaloneConfigurationNoCudaOccupancyAPI,      'cuda_standalone'),
+          #(CUDAStandaloneConfigurationNoCudaOccupancyAPIProfileCPU,    'cuda_standalone'),
+          #(CUDAStandaloneConfiguration2BlocksPerSM, 'cuda_standalone'),
+          #(CUDAStandaloneConfiguration2BlocksPerSMLaunchBounds, 'cuda_standalone'),
+          #(CUDAStandaloneConfigurationSynLaunchBounds,     'cuda_standalone'),
+          #(CUDAStandaloneConfiguration2BlocksPerSMSynLaunchBounds, 'cuda_standalone'),
+          #(CUDAStandaloneConfigurationProfileGPU,   'cuda_standalone'),
+          #(CUDAStandaloneConfigurationProfileCPU,   'cuda_standalone'),
+          (GeNNConfigurationOptimized,              'GeNNworkspace'),
+          #(GeNNConfiguration,                       'GeNNworkspace'),
           (CPPStandaloneConfigurationOpenMP,        'cpp_standalone'),
-          (GeNNConfigurationCPU,                    'GeNNworkspace'),
-          (GeNNConfigurationOptimized,              'GeNNworkspace')
+          (CPPStandaloneConfiguration,              'cpp_standalone'),
+          #(GeNNConfigurationCPU,                    'GeNNworkspace'),
           ]
 
 speed_tests = [# feature_test                     name                                  n_slice
 
-               (ThresholderOnlyPoissonLowRate,                  'ThresholderOnlyPoissonLowRate',                slice(None)         ),
-               (ThresholderOnlyPoissonMediumRate,               'ThresholderOnlyPoissonMediumRate',             slice(None)         ),
-               (ThresholderOnlyPoissonHighRate,                 'ThresholderOnlyPoissonHighRate',               slice(None)         ),
-               (ThresholderOnlyAlwaysSpiking,                   'ThresholderOnlyAlwaysSpiking',                 slice(None)         ),
-
-               (BrunelHakimStateupdateOnlyDouble,               'BrunelHakimStateupdateOnlyDouble',             slice(None)         ),
-               (BrunelHakimStateupdateOnlyTriple,               'BrunelHakimStateupdateOnlyTriple',             slice(None)         ),
-               (BrunelHakimStateupdateOnly,                     'BrunelHakimStateupdateOnly',                   slice(None)         ),
-               (BrunelHakimNeuronsOnly,                         'BrunelHakimNeuronsOnly',                       slice(None)         ),
-               (BrunelHakimNeuronsOnlyNoXi,                     'BrunelHakimNeuronsOnlyNoXi',                   slice(None)         ),
-               (BrunelHakimNeuronsOnlyNoRand,                   'BrunelHakimNeuronsOnlyNoRand',                 slice(None)         ),
-               (BrunelHakimStateupdateThresholdOnly,            'BrunelHakimStateupdateThresholdOnly',          slice(None)         ),
-               (BrunelHakimStateupdateThresholdResetOnly,       'BrunelHakimStateupdateThresholdResetOnly',     slice(None)         ),
-               (BrunelHakimModelScalarDelayShort,               'BrunelHakimModelScalarDelayShort',             slice(None)         ),
-               (BrunelHakimModelScalarDelayNoSelfConnections,   'BrunelHakimModelScalarDelayNoSelfConnections', slice(None)         ),
-               (CUBAFixedConnectivityNoMonitor,                 'CUBAFixedConnectivityNoMonitor',               slice(None)         ),
-               (COBAHHConstantConnectionProbability,            'COBAHHConstantConnectionProbability',          slice(None)         ),
-               (COBAHHFixedConnectivityNoMonitor,               'COBAHHFixedConnectivityNoMonitor',             slice(None)         ),
-               (AdaptationOscillation,                          'AdaptationOscillation',                        slice(None)         ),
-               (Vogels,                                         'Vogels',                                       slice(None)         ),
-               (STDP,                                           'STDP',                                         slice(None)         ),
-               (STDPEventDriven,                                'STDPEventDriven',                              slice(None)         ),
-               (BrunelHakimModelScalarDelay,                    'BrunelHakimModelScalarDelay',                  slice(None)         ),
-
-               (VerySparseMediumRateSynapsesOnly,               'VerySparseMediumRateSynapsesOnly',             slice(None)         ),
-               (SparseMediumRateSynapsesOnly,                   'SparseMediumRateSynapsesOnly',                 slice(None)         ),
-               (DenseMediumRateSynapsesOnly,                    'DenseMediumRateSynapsesOnly',                  slice(None)         ),
-               (SparseLowRateSynapsesOnly,                      'SparseLowRateSynapsesOnly',                    slice(None)         ),
-               (SparseHighRateSynapsesOnly,                     'SparseHighRateSynapsesOnly',                   slice(None)         ),
-
-               (STDPNotEventDriven,                             'STDPNotEventDriven',                           slice(None)         ),
-               (STDPMultiPost,                                  'STDPMultiPost',                                slice(None)         ),
-               (STDPNeuronalTraces,                             'STDPNeuronalTraces',                           slice(None)         ),
-               (STDPMultiPostNeuronalTraces,                    'STDPMultiPostNeuronalTraces',                  slice(None)         ),
-
-               (DenseMediumRateSynapsesOnlyHeterogeneousDelays, 'DenseMediumRateSynapsesOnlyHeterogeneousDelays', slice(None)       ),
-               (SparseLowRateSynapsesOnlyHeterogeneousDelays,   'SparseLowRateSynapsesOnlyHeterogeneousDelays', slice(None)         ),
-               (BrunelHakimModelHeterogeneousDelay,             'BrunelHakimModelHeterogeneousDelay',           slice(None)         ),
-
-               (LinearNeuronsOnly,                              'LinearNeuronsOnly',                            slice(None)         ),
-               (HHNeuronsOnly,                                  'HHNeuronsOnly',                                slice(None)         ),
-               (VogelsWithSynapticDynamic,                      'VogelsWithSynapticDynamic',                    slice(None)         ),
-
-               ## below uses monitors
-               (CUBAFixedConnectivity,                          'CUBAFixedConnectivity',                        slice(None)         ),
-               (COBAHHFixedConnectivity,                        'COBAHHFixedConnectivity',                      slice(None, -1)     ),
+               (MushroomBody,                                   'MushroomBody',                                 slice(None)         ),
+               #(ThresholderOnlyPoissonLowRate,                  'ThresholderOnlyPoissonLowRate',                slice(None)         ),
+               #(ThresholderOnlyPoissonMediumRate,               'ThresholderOnlyPoissonMediumRate',             slice(None)         ),
+               #(ThresholderOnlyPoissonHighRate,                 'ThresholderOnlyPoissonHighRate',               slice(None)         ),
+               #(ThresholderOnlyAlwaysSpiking,                   'ThresholderOnlyAlwaysSpiking',                 slice(None)         ),
+
+               #(BrunelHakimStateupdateOnlyDouble,               'BrunelHakimStateupdateOnlyDouble',             slice(None)         ),
+               #(BrunelHakimStateupdateOnlyTriple,               'BrunelHakimStateupdateOnlyTriple',             slice(None)         ),
+               #(BrunelHakimStateupdateOnly,                     'BrunelHakimStateupdateOnly',                   slice(None)         ),
+               #(BrunelHakimNeuronsOnly,                         'BrunelHakimNeuronsOnly',                       slice(None)         ),
+               #(BrunelHakimNeuronsOnlyNoXi,                     'BrunelHakimNeuronsOnlyNoXi',                   slice(None)         ),
+               #(BrunelHakimNeuronsOnlyNoRand,                   'BrunelHakimNeuronsOnlyNoRand',                 slice(None)         ),
+               #(BrunelHakimStateupdateThresholdOnly,            'BrunelHakimStateupdateThresholdOnly',          slice(None)         ),
+               #(BrunelHakimStateupdateThresholdResetOnly,       'BrunelHakimStateupdateThresholdResetOnly',     slice(None)         ),
+               #(BrunelHakimModelScalarDelayShort,               'BrunelHakimModelScalarDelayShort',             slice(None)         ),
+               #(BrunelHakimModelScalarDelayNoSelfConnections,   'BrunelHakimModelScalarDelayNoSelfConnections', slice(None)         ),
+#               (COBAHHFixedConnectivityNoMonitor,               'COBAHHFixedConnectivityNoMonitor',             slice(2, None, None)         ),
+#               (AdaptationOscillation,                          'AdaptationOscillation',                        slice(2, None, None)         ),
+#               (Vogels,                                         'Vogels',                                       slice(2, None, None)         ),
+#               (STDPEventDriven,                                'STDPEventDriven',                              slice(2, None, None)         ),
+#               (BrunelHakimModelScalarDelay,                    'BrunelHakimModelScalarDelay',                  slice(2, None, None)         ),
+#
+#               (VerySparseMediumRateSynapsesOnly,               'VerySparseMediumRateSynapsesOnly',             slice(2, None, None)         ),
+#               (SparseMediumRateSynapsesOnly,                   'SparseMediumRateSynapsesOnly',                 slice(2, None, None)         ),
+#               (DenseMediumRateSynapsesOnly,                    'DenseMediumRateSynapsesOnly',                  slice(2, None, None)         ),
+#               (SparseLowRateSynapsesOnly,                      'SparseLowRateSynapsesOnly',                    slice(2, None, None)         ),
+#               (SparseHighRateSynapsesOnly,                     'SparseHighRateSynapsesOnly',                   slice(2, None, None)         ),
+#
+#               (STDPNotEventDriven,                             'STDPNotEventDriven',                           slice(2, None, None)         ),
+#               #(STDPMultiPost,                                  'STDPMultiPost',                                slice(None)         ),
+#               #(STDPNeuronalTraces,                             'STDPNeuronalTraces',                           slice(None)         ),
+#               #(STDPMultiPostNeuronalTraces,                    'STDPMultiPostNeuronalTraces',                  slice(None)         ),
+#
+#               (DenseMediumRateSynapsesOnlyHeterogeneousDelays, 'DenseMediumRateSynapsesOnlyHeterogeneousDelays', slice(2, None)       ),
+#               (SparseLowRateSynapsesOnlyHeterogeneousDelays,   'SparseLowRateSynapsesOnlyHeterogeneousDelays', slice(2, None, None)         ),
+#               (BrunelHakimModelHeterogeneousDelay,             'BrunelHakimModelHeterogeneousDelay',           slice(2, None, None)         ),
+#
+#               (LinearNeuronsOnly,                              'LinearNeuronsOnly',                            slice(2, None, None)         ),
+#               (HHNeuronsOnly,                                  'HHNeuronsOnly',                                slice(2, None, None)         ),
+#               (VogelsWithSynapticDynamic,                      'VogelsWithSynapticDynamic',                    slice(2, None, None)         ),
+#
+#               ### below uses monitors
+#               (CUBAFixedConnectivity,                          'CUBAFixedConnectivity',                        slice(2, None, None)         ),
+#               (COBAHHFixedConnectivity,                        'COBAHHFixedConnectivity',                      slice(2, None, None)     ),
+#               (STDP,                                           'STDP',                                         slice(2, None, None)         ),
+#
+#               ## just moved below since they already run
+#               (CUBAFixedConnectivityNoMonitor,                 'CUBAFixedConnectivityNoMonitor',               slice(2, None, None)         ),
+#               (COBAHHConstantConnectionProbability,            'COBAHHConstantConnectionProbability',          slice(2, None, None)         ),
 ]
 
 configurations = [config[0] for config in configs]
diff --git a/dev/benchmarks/test_max_network_sizes.py b/dev/benchmarks/test_max_network_sizes.py
index f994612..ff509eb 100644
--- a/dev/benchmarks/test_max_network_sizes.py
+++ b/dev/benchmarks/test_max_network_sizes.py
@@ -47,33 +47,34 @@ from helpers import pickle_results
 
 speed_tests = [# feature_test                     name                                  n_slice
 
-               (CUBAFixedConnectivityNoMonitor,                  'CUBAFixedConnectivityNoMonitor',              slice(None)         ),
-               (COBAHHConstantConnectionProbability,             'COBAHHConstantConnectionProbability',         slice(None)         ),
-               (COBAHHFixedConnectivityNoMonitor,                'COBAHHFixedConnectivityNoMonitor',            slice(None)         ),
-               (AdaptationOscillation,                          'AdaptationOscillation',                        slice(None, -1)     ),
-               (Vogels,                                         'Vogels',                                       slice(None)         ),
-               (STDPEventDriven,                                'STDPEventDriven',                              slice(None)         ),
-               (BrunelHakimModelScalarDelay,                    'BrunelHakimModelScalarDelay',                  slice(None)         ),
-
-               (VerySparseMediumRateSynapsesOnly,               'VerySparseMediumRateSynapsesOnly',             slice(None)         ),
-               (SparseMediumRateSynapsesOnly,                   'SparseMediumRateSynapsesOnly',                 slice(None)         ),
-               (DenseMediumRateSynapsesOnly,                    'DenseMediumRateSynapsesOnly',                  slice(None)         ),
-               (SparseLowRateSynapsesOnly,                      'SparseLowRateSynapsesOnly',                    slice(None)         ),
-               (SparseHighRateSynapsesOnly,                     'SparseHighRateSynapsesOnly',                   slice(None)         ),
-
-               (STDPNotEventDriven,                             'STDPNotEventDriven',                           slice(None)         ),
-
-               (DenseMediumRateSynapsesOnlyHeterogeneousDelays, 'DenseMediumRateSynapsesOnlyHeterogeneousDelays', slice(None)       ),
-               (SparseLowRateSynapsesOnlyHeterogeneousDelays,   'SparseLowRateSynapsesOnlyHeterogeneousDelays', slice(None)         ),
-               (BrunelHakimModelHeterogeneousDelay,             'BrunelHakimModelHeterogeneousDelay',           slice(None)         ),
-
-               (LinearNeuronsOnly,                              'LinearNeuronsOnly',                            slice(None)         ),
-               (HHNeuronsOnly,                                  'HHNeuronsOnly',                                slice(None)         ),
-               (VogelsWithSynapticDynamic,                      'VogelsWithSynapticDynamic',                    slice(None)         ),
-
-               ### below uses monitors
-               (CUBAFixedConnectivity,                          'CUBAFixedConnectivity',                        slice(None)         ),
-               (COBAHHFixedConnectivity,                        'COBAHHFixedConnectivity',                      slice(None)         ),
+               #(CUBAFixedConnectivityNoMonitor,                  'CUBAFixedConnectivityNoMonitor',              slice(None)         ),
+               #(COBAHHConstantConnectionProbability,             'COBAHHConstantConnectionProbability',         slice(None)         ),
+               #(COBAHHFixedConnectivityNoMonitor,                'COBAHHFixedConnectivityNoMonitor',            slice(None)         ),
+               #(AdaptationOscillation,                          'AdaptationOscillation',                        slice(None, -1)     ),
+               #(Vogels,                                         'Vogels',                                       slice(None)         ),
+               #(STDPEventDriven,                                'STDPEventDriven',                              slice(None)         ),
+               #(BrunelHakimModelScalarDelay,                    'BrunelHakimModelScalarDelay',                  slice(None)         ),
+
+               #(VerySparseMediumRateSynapsesOnly,               'VerySparseMediumRateSynapsesOnly',             slice(None)         ),
+               #(SparseMediumRateSynapsesOnly,                   'SparseMediumRateSynapsesOnly',                 slice(None)         ),
+               #(DenseMediumRateSynapsesOnly,                    'DenseMediumRateSynapsesOnly',                  slice(None)         ),
+               #(SparseLowRateSynapsesOnly,                      'SparseLowRateSynapsesOnly',                    slice(None)         ),
+               #(SparseHighRateSynapsesOnly,                     'SparseHighRateSynapsesOnly',                   slice(None)         ),
+
+               #(STDPNotEventDriven,                             'STDPNotEventDriven',                           slice(None)         ),
+
+               #(DenseMediumRateSynapsesOnlyHeterogeneousDelays, 'DenseMediumRateSynapsesOnlyHeterogeneousDelays', slice(None)       ),
+               #(SparseLowRateSynapsesOnlyHeterogeneousDelays,   'SparseLowRateSynapsesOnlyHeterogeneousDelays', slice(None)         ),
+               #(BrunelHakimModelHeterogeneousDelay,             'BrunelHakimModelHeterogeneousDelay',           slice(None)         ),
+               (BrunelHakimModelHeterogeneousDelayBundleSize1,  'BrunelHakimModelHeterogeneousDelayBundleSize1',slice(None)         ),
+
+               #(LinearNeuronsOnly,                              'LinearNeuronsOnly',                            slice(None)         ),
+               #(HHNeuronsOnly,                                  'HHNeuronsOnly',                                slice(None)         ),
+               #(VogelsWithSynapticDynamic,                      'VogelsWithSynapticDynamic',                    slice(None)         ),
+
+               #### below uses monitors
+               #(CUBAFixedConnectivity,                          'CUBAFixedConnectivity',                        slice(None)         ),
+               #(COBAHHFixedConnectivity,                        'COBAHHFixedConnectivity',                      slice(None)         ),
 ]
 
 time_format = '%d.%m.%Y at %H:%M:%S'
diff --git a/examples/STDP_standalone_cuda.py b/examples/STDP_standalone_cuda.py
index 8807b28..6410822 100644
--- a/examples/STDP_standalone_cuda.py
+++ b/examples/STDP_standalone_cuda.py
@@ -14,6 +14,21 @@ import brian2cuda
 set_device('cuda_standalone', directory='STDP_standalone_cuda', compile=True,
              run=True, debug=True)
 
+dev_no = 1
+
+dev_no_to_cc = {0: '61', 1: '52'}
+cc = dev_no_to_cc[dev_no]
+prefs['codegen.cuda.extra_compile_args_nvcc'].remove('-arch=sm_35')
+prefs['codegen.cuda.extra_compile_args_nvcc'].extend(['-arch=sm_{}'.format(cc)])
+print("CC", cc)
+
+default_env = prefs['devices.cpp_standalone.run_environment_variables']
+gpu_env = default_env.copy()
+gpu_env.update({'CUDA_VISIBLE_DEVICES': str(dev_no)})
+prefs['devices.cpp_standalone.run_environment_variables'] = gpu_env
+
+print("pref", prefs['devices.cpp_standalone.run_environment_variables'])
+
 N = 1000
 taum = 10*ms
 taupre = 20*ms
@@ -53,7 +68,7 @@ mon = StateMonitor(S, 'w', record=[0, 1])
 s_mon = SpikeMonitor(input)
 r_mon = PopulationRateMonitor(input)
 
-run(100*second, report='text')
+run(1*second, report='text')
 
 subplot(311)
 suptitle('STDP_standalone_cuda')
diff --git a/examples/cuba_cpp.py b/examples/cuba_cpp.py
index 7c48e26..52c2012 100644
--- a/examples/cuba_cpp.py
+++ b/examples/cuba_cpp.py
@@ -6,8 +6,18 @@ import matplotlib
 matplotlib.use('Agg')
 
 from brian2 import *
-
-set_device('cpp_standalone', directory='CUBA_cpp',compile=True, run=True, debug=True)
+import brian2cuda
+
+set_device('cuda_standalone', directory='CUBA_CUBA',compile=True, run=True, debug=True)
+
+default_env = prefs['devices.cpp_standalone.run_environment_variables']
+gpu_1_env = default_env.copy()
+gpu_1_env.update({'CUDA_VISIBLE_DEVICES': '1'})
+gpu_0_env = default_env.copy()
+gpu_0_env.update({'CUDA_VISIBLE_DEVICES': '0'})
+prefs['devices.cpp_standalone.run_environment_variables'] = gpu_0_env
+print("gpu_0_env", gpu_0_env, "gpu_1_env", gpu_1_env)
+print("pref", prefs['devices.cpp_standalone.run_environment_variables'])
 
 taum = 20*ms
 taue = 5*ms
diff --git a/examples/cuba_cuda.py b/examples/cuba_cuda.py
index 417f60d..e88d3b3 100644
--- a/examples/cuba_cuda.py
+++ b/examples/cuba_cuda.py
@@ -37,7 +37,7 @@ Ci.connect('i>=3200', p=0.02)
 
 s_mon = SpikeMonitor(P)
 
-run(1 * second, report='text')
+run(10 * second, report='text')
 
 plot(s_mon.t/ms, s_mon.i, '.k', ms=1)
 title('CUBA_CUDA')
diff --git a/frozen_repos/brian2 b/frozen_repos/brian2
--- a/frozen_repos/brian2
+++ b/frozen_repos/brian2
@@ -1 +1 @@
-Subproject commit c4f28201fb406cc10807258f1cf09ac9c5dd7524
+Subproject commit c4f28201fb406cc10807258f1cf09ac9c5dd7524-dirty
diff --git a/frozen_repos/brian2genn b/frozen_repos/brian2genn
--- a/frozen_repos/brian2genn
+++ b/frozen_repos/brian2genn
@@ -1 +1 @@
-Subproject commit 8c6da48b3aeec9dfdbf30dc0fd5c7c517e8aecc7
+Subproject commit 8c6da48b3aeec9dfdbf30dc0fd5c7c517e8aecc7-dirty
diff --git a/frozen_repos/init_genn b/frozen_repos/init_genn
index ea98a4a..ad99703 100644
--- a/frozen_repos/init_genn
+++ b/frozen_repos/init_genn
@@ -3,6 +3,6 @@
 # source this file to set environmental variables for genn:
 # `source ./init_genn`
 
-export CUDA_PATH=/usr/local/cuda
+export CUDA_PATH=$PREFIX_CUDA
 export GENN_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )/genn" && pwd )"
 export PATH=$PATH:$GENN_PATH/lib/bin
