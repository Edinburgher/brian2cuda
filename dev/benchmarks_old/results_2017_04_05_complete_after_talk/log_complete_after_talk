Directory with name `results_2017_04_05_complete_after_talk` already exists. Renaming it to `results_2017_04_05_complete_after_talk_bak_1491422611`.
Saving results in results_2017_04_05_complete_after_talk/plots.
Starting CUBA on 05.04.2017 at 22:03:31.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: CUBA fixed connectivity:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=1000000 [E..]WARNING    /home/denisalevi/anaconda2/envs/dev_b2c/lib/python2.7/site-packages/matplotlib/__init__.py:892: UserWarning: axes.color_cycle is deprecated and replaced with axes.prop_cycle; please use the latter.
  warnings.warn(self.msg_depr % (key, alt_key))
 [py.warnings]


TRACEBACK CUDA standalone N=1000000
INFO: setting cudaDevice stuff took 0.265023 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 977 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 15999736
INFO connectivity matrix has size 64013467
INFO calling kernel_neurongroup_stateupdater_codeobject with 1303 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1101 invalid argument

('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
INFO: setting cudaDevice stuff took 0.265023 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 977 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 15999736
INFO connectivity matrix has size 64013467
INFO calling kernel_neurongroup_stateupdater_codeobject with 1303 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1101 invalid argument


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       No numerical integration method specified for group 'neurongroup', using method 'linear' (took 1.49s). [brian2.stateupdaters.base.method_choice]

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)



Running CUBA took 2:08:31.
INFO relative performance for Full examples: CUBA fixed connectivity N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=1000000 CUDA standalone: nan
INFO relative performance for Full examples: CUBA fixed connectivity N=10 C++ standalone: 9.50331627245
INFO relative performance for Full examples: CUBA fixed connectivity N=100 C++ standalone: 8.5446853951
INFO relative performance for Full examples: CUBA fixed connectINFO: setting cudaDevice stuff took 0.172666 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 16108
INFO connectivity matrix has size 64158
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_1_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 64158
Number of synapses: 16108
INFO: main_lines took 5.325889 seconds
INFO: main function took 5.523285 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
ivity N=1000 C++ standalone: 3.79737620222
INFO relative performance for Full examples: CUBA fixed connectivity N=10000 C++ standalone: 0.797678384644
INFO relative performance for Full examples: CUBA fixed connectivity N=100000 C++ standalone: 0.440223048132
INFO relative performance for Full examples: CUBA fixed connectivity N=1000000 C++ standalone: nan
INFO relative performance for Full examples: CUBA fixed connectivity N=10 GeNN_optimized: 2.12816895677
INFO relative performance for Full examples: CUBA fixed connectivity N=100 GeNN_optimized: 1.93923218414
INFO relative performance for Full examples: CUBA fixed connectivity N=1000 GeNN_optimized: 1.75435949027
INFO relative performance for Full examples: CUBA fixed connectivity N=10000 GeNN_optimized: 1.43439787216
INFO relative performance for Full examples: CUBA fixed connectivity N=100000 GeNN_optimized: 0.625130402294
INFO relative performance for Full examples: CUBA fixed connectivity N=1000000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_CUBA_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:10 for runtime of 0.355534
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_CUBA_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:02 for runtime of 0.199734
Starting COBAHH on 06.04.2017 at 00:13:16.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: COBAHH:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...]INFO: setting cudaDevice stuff took 0.156221 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_1 with 1 blocks and 1024 threads. Kernel needs 7 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_2 with 1 blocks and 1024 threads. Kernel needs 7 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 3949
INFO connectivity matrix has size 15742
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 512 threads. Kernel needs 109 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.250000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_1_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 3949
Number of synapses: 15742
INFO: main_lines took 4.652397 seconds
INFO: main function took 4.834268 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running COBAHH took 0:55:44.
INFO relative performance for Full examples: COBAHH N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH N=10 C++ standalone: 5.97680043162
INFO relative performance for Full examples: COBAHH N=100 C++ standalone: 1.00371226203
INFO relative performance for Full examples: COBAHH N=1000 C++ standalone: 0.154618074816
INFO relative performance for Full examples: COBAHH N=10000 C++ standalone: 0.0396381192455
INFO relative performance for Full examples: COBAHH N=20000 C++ standalone: 0.0253531218652
INFO relative performance for Full examples: COBAHH N=50000 C++ standalone: 0.0106447160514
INFO relative performance for Full examples: COBAHH N=100000 C++ standalone: 0.00914741719581
INFO relative performance for Full examples: COBAHH N=10 GeNN_optimized: 1.08714146487
INFO relative performance for Full examples: COBAHH N=100 GeNN_optimized: 1.20794915957
INFO relative performance for Full examples: COBAHH N=1000 GeNN_optimized: 1.32626500874
INFO relative performance for Full examples: COBAHH N=10000 GeNN_optimized: 1.27813023083
INFO relative performance for Full examples: COBAHH N=20000 GeNN_optimized: 2.12777862025
INFO relative performance for Full examples: COBAHH N=50000 GeNN_optimized: 1.22069742475
INFO relative performance for Full examples: COBAHH N=100000 GeNN_optimized: 1.09531764141
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_COBAHH_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:09 for runtime of 0.531296
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_COBAHH_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.409076
Starting AdaptationOscillation on 06.04.2017 at 01:10:20.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: Adaptation oscillation:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [E.E]

TRACEBACK CUDA standalone N=100000
INFO: setting cudaDevice stuff took 0.311282 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 98 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_1 with 98 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory

('debug syn effect mdoe ', 'target')
INFO: setting cudaDevice stuff took 0.311282 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 98 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_1 with 98 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.14s, trying other methods took 0.00s). [brian2.stateupdaters.base.method_choice]
terminate called after throwing an instance of 'thrust::system::detail::bad_alloc'
  what():  std::bad_alloc: out of memory

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)




TRACEBACK GeNN_optimized N=100000
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
executing genn binary on GPU ...

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.12s, trying other methods took 0.00s). [brian2.stateupdaters.base.method_choice]
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
definitions.h: 102: cuda runtime error 2: out of memory

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 89, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 592, in build
    returncode=ex.returncode)
RuntimeError: Project run failed (Command ['./main', 'test', '1.0', '1'] failed with error code 1).
See the output above (if any) for more details.



Running AdaptationOscillation took 1:41:42.
INFO relative performance for Full examples: Adaptation oscillation N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: Adaptation oscillation N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: Adaptation oscillation N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: Adaptation oscillation N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: Adaptation oscillation N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: Adaptation oscillation N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: Adaptation oscillation N=100000 CUDA standalone: nan
INFO relative performance for Full examples: Adaptation oscillation N=10 C++ standalone: 8.59983763369
INFO relative performance for Full examples: Adaptation oscillation N=100 C++ standalone: 2.8440796921
INFO relative performance for Full examples: Adaptation oscillation N=1000 C++ standalone: 0.506496466226
INFO relative performance for Full examples: Adaptation oscillation N=10000 C++ standalone: 0.214522626694
INFO relative performance for Full examples: Adaptation oscillation N=20000 C++ standalone: 0.170045431942
INFO relative performance for Full examples: Adaptation oscillation N=50000 C++ standalone: 0.109420242272
INFO relative performance for Full examples: Adaptation oscillation N=100000 C++ standalone: nan
INFO relative performance for Full examples: Adaptation oscillation N=10 GeNN_optimized: 1.54028322165
INFO relative performance for Full examples: Adaptation oscillation N=100 GeNN_optimized: 1.37097363869
INFO relative performance for Full examples: Adaptation oscillation N=1000 GeNN_optimized: 1.2270477INFO: setting cudaDevice stuff took 0.149325 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_1 with 1 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 49 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_synapses_group_variable_set_conditional_codeobject_1 with 49 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 49931
INFO generating 10000000 randn every 13107 clock cycles for neurongroup_stateupdater_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 576 threads. Kernel needs 52 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.562500.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 28 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 49931
INFO: main_lines took 4.071034 seconds
INFO: main function took 4.240770 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
4328
INFO relative performance for Full examples: Adaptation oscillation N=10000 GeNN_optimized: 1.08010242282
INFO relative performance for Full examples: Adaptation oscillation N=20000 GeNN_optimized: 1.04654988332
INFO relative performance for Full examples: Adaptation oscillation N=50000 GeNN_optimized: 0.961954575197
INFO relative performance for Full examples: Adaptation oscillation N=100000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_AdaptationOscillation_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:07 for runtime of 0.372608
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_AdaptationOscillation_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.311908
Starting Vogels on 06.04.2017 at 02:53:45.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: Vogels et al 2011 (event-driven synapses):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [E..]

TRACEBACK CUDA standalone N=100000
INFO: setting cudaDevice stuff took 0.263336 seconds
INFO connectivity matrix has size 7997654
INFO connectivity matrix has size 31988320
INFO connectivity matrix has size 159989507
INFO connectivity matrix has size 31988320
INFO calling kernel_neurongroup_stateupdater_codeobject with 131 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1066 invalid argument

('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'synapse')
INFO: setting cudaDevice stuff took 0.263336 seconds
INFO connectivity matrix has size 7997654
INFO connectivity matrix has size 31988320
INFO connectivity matrix has size 159989507
INFO connectivity matrix has size 31988320
INFO calling kernel_neurongroup_stateupdater_codeobject with 131 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1066 invalid argument


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.11s). [brian2.stateupdaters.base.method_choice]

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)



Running Vogels took 1:24:04.
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=100000 CUDA standalone: nan
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=10 C++ standalone: 5.81708231538
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=100 C++ standalone: 8.52257702632
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=1000 C++ standalone: 3.6497INFO: setting cudaDevice stuff took 0.201820 seconds
INFO connectivity matrix has size 776
INFO connectivity matrix has size 3224
INFO connectivity matrix has size 15811
INFO connectivity matrix has size 3224
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_1_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_2_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 42 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_2_post_codeobject with 15 blocks and 1024 threads. Kernel needs 34 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 3224
Number of synapses: 3224
Number of synapses: 15811
Number of synapses: 776
INFO: main_lines took 7.959584 seconds
INFO: main function took 8.189923 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
7700535
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=10000 C++ standalone: 1.27385995798
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=20000 C++ standalone: 0.756183613604
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=50000 C++ standalone: 0.427712217638
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=100000 C++ standalone: nan
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=10 GeNN_optimized: 1.48314163249
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=100 GeNN_optimized: 2.17682514992
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=1000 GeNN_optimized: 1.16598307673
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=10000 GeNN_optimized: 0.540424662951
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=20000 GeNN_optimized: 0.560432413335
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=50000 GeNN_optimized: 0.536937885623
INFO relative performance for Full examples: Vogels et al 2011 (event-driven synapses) N=100000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_Vogels_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:15 for runtime of 0.85962
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_Vogels_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:04 for runtime of 0.740019
Starting STDP on 06.04.2017 at 04:19:26.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: STDP with Poisson input:  n=100 [...] n=500 [...] n=1000 [...] n=5000 [...] n=10000 [...] n=50000 [...] n=100000 [...] n=500000 [...] n=1000000 [...]INFO: setting cudaDevice stuff took 0.313461 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 1000
INFO connectivity matrix has size 1000
INFO generating 10000000 rand every 13107 clock cycles for poissongroup_thresholder_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 9 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_poissongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 15 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_spikemonitor_codeobject with 1 blocks and 1 threads. Kernel needs 37 registers per block, 0 bytes of statically-allocated shared memory per block, 16 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 42 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_synapses_post_codeobject with 15 blocks and 1024 threads. Kernel needs 34 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000
Number of synapses: 1000
INFO: main_lines took 6.937627 seconds
Number of spikes: 14845
INFO: main function took 7.299253 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running STDP took 1:20:32.
INFO relative performance for Full examples: STDP with Poisson input N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=500 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=5000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=500000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=1000000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with Poisson input N=100 C++ standalone: 8.88338818143
INFO relative performance for Full examples: STDP with Poisson input N=500 C++ standalone: 5.09683126402
INFO relative performance for Full examples: STDP with Poisson input N=1000 C++ standalone: 3.43176369337
INFO relative performance for Full examples: STDP with Poisson input N=5000 C++ standalone: 1.23369418761
INFO relative performance for Full examples: STDP with Poisson input N=10000 C++ standalone: 0.740582551232
INFO relative performance for Full examples: STDP with Poisson input N=50000 C++ standalone: 0.373019575212
INFO relative performance for Full examples: STDP with Poisson input N=100000 C++ standalone: 0.364799663468
INFO relative performance for Full examples: STDP with Poisson input N=500000 C++ standalone: 2.96351279504
INFO relative performance for Full examples: STDP with Poisson input N=1000000 C++ standalone: 4.70050294368
INFO relative performance for Full examples: STDP with Poisson input N=100 GeNN_optimized: 1.30974438102
INFO relative performance for Full examples: STDP with Poisson input N=500 GeNN_optimized: 1.18471683703
INFO relative performance for Full examples: STDP with Poisson input N=1000 GeNN_optimized: 1.16060458009
INFO relative performance for Full examples: STDP with Poisson input N=5000 GeNN_optimized: 1.56393492832
INFO relative performance for Full examples: STDP with Poisson input N=10000 GeNN_optimized: 1.7254821012
INFO relative performance for Full examples: STDP with Poisson input N=50000 GeNN_optimized: 1.69780564815
INFO relative performance for Full examples: STDP with Poisson input N=100000 GeNN_optimized: 1.68674045475
INFO relative performance for Full examples: STDP with Poisson input N=500000 GeNN_optimized: 14.7726180354
INFO relative performance for Full examples: STDP with Poisson input N=1000000 GeNN_optimized: 23.369044153
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDP_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:12 for runtime of 0.558918
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDP_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:04 for runtime of 0.479759
Starting STDPEventDriven on 06.04.2017 at 05:41:19.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: STDP (event-driven):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...] n=1000000 [...] n=5000000 [...]INFO: setting cudaDevice stuff took 0.328379 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 1000
INFO connectivity matrix has size 1000
INFO generating 10000000 rand every 13107 clock cycles for poissongroup_thresholder_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 9 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_poissongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 15 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 42 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_synapses_post_codeobject with 15 blocks and 1024 threads. Kernel needs 34 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000
Number of synapses: 1000
INFO: main_lines took 5.794570 seconds
INFO: main function took 6.145385 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running STDPEventDriven took 1:19:53.
INFO relative performance for Full examples: STDP (event-driven) N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=1000000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=5000000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (event-driven) N=10 C++ standalone: 11.2497943354
INFO relative performance for Full examples: STDP (event-driven) N=100 C++ standalone: 8.31207995112
INFO relative performance for Full examples: STDP (event-driven) N=1000 C++ standalone: 2.61972877926
INFO relative performance for Full examples: STDP (event-driven) N=10000 C++ standalone: 0.288795267181
INFO relative performance for Full examples: STDP (event-driven) N=20000 C++ standalone: 0.142747274164
INFO relative performance for Full examples: STDP (event-driven) N=50000 C++ standalone: 0.127502322902
INFO relative performance for Full examples: STDP (event-driven) N=100000 C++ standalone: 0.124020384785
INFO relative performance for Full examples: STDP (event-driven) N=1000000 C++ standalone: 0.111562986518
INFO relative performance for Full examples: STDP (event-driven) N=5000000 C++ standalone: 0.115750281196
INFO relative performance for Full examples: STDP (event-driven) N=10 GeNN_optimized: 2.76946556051
INFO relative performance for Full examples: STDP (event-driven) N=100 GeNN_optimized: 2.56034789856
INFO relative performance for Full examples: STDP (event-driven) N=1000 GeNN_optimized: 1.81374117769
INFO relative performance for Full examples: STDP (event-driven) N=10000 GeNN_optimized: 0.854456214358
INFO relative performance for Full examples: STDP (event-driven) N=20000 GeNN_optimized: 0.725383414514
INFO relative performance for Full examples: STDP (event-driven) N=50000 GeNN_optimized: 0.633313911843
INFO relative performance for Full examples: STDP (event-driven) N=100000 GeNN_optimized: 0.609749101371
INFO relative performance for Full examples: STDP (event-driven) N=1000000 GeNN_optimized: 0.578689800398
INFO relative performance for Full examples: STDP (event-driven) N=5000000 GeNN_optimized: 0.607900794592
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPEventDriven_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:10 for runtime of 0.415781
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPEventDriven_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:02 for runtime of 0.232967
Starting BrunelHakimModelScalarDelay on 06.04.2017 at 07:02:28.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: Brunel Hakim with scalar delay (1s):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...] n=250000 [...]INFO: setting cudaDevice stuff took 0.303419 seconds
INFO connectivity matrix has size 1000000
INFO generating 10000000 randn every 13107 clock cycles for neurongroup_stateupdater_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 576 threads. Kernel needs 52 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.562500.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000000
INFO: main_lines took 4.771391 seconds
INFO: main function took 5.118664 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running BrunelHakimModelScalarDelay took 2:11:11.
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=250000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=10 C++ standalone: 9.78843893145
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=100 C++ standalone: 2.88689717066
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=1000 C++ standalone: 0.39678676061
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=10000 C++ standalone: 0.0579548817132
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=20000 C++ standalone: 0.043471563887
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=50000 C++ standalone: 0.032781986812
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=100000 C++ standalone: 0.0294157569658
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=250000 C++ standalone: 0.0305941911305
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=10 GeNN_optimized: 1.58033861921
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=100 GeNN_optimized: 1.39364952685
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=1000 GeNN_optimized: 1.28814277906
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=10000 GeNN_optimized: 1.15879715758
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=20000 GeNN_optimized: 1.08175176136
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=50000 GeNN_optimized: 0.884117890361
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=100000 GeNN_optimized: 0.770480233171
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s) N=250000 GeNN_optimized: 0.457457403795
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_BrunelHakimModelScalarDelay_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:09 for runtime of 0.248229
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_BrunelHakimModelScalarDelay_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:04 for runtime of 0.195981
Starting BrunelHakimModelScalarDelayNoMultiPrePost on 06.04.2017 at 09:15:13.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...] n=250000 [...]INFO: setting cudaDevice stuff took 0.171453 seconds
INFO connectivity matrix has size 999000
INFO generating 10000000 randn every 13107 clock cycles for neurongroup_stateupdater_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 576 threads. Kernel needs 52 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.562500.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 999000
INFO: main_lines took 4.843546 seconds
INFO: main function took 5.059406 seconds

Running BrunelHakimModelScalarDelayNoMultiPrePost took 2:09:50.
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=250000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=10 C++ standalone: 8.20634264047
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=100 C++ standalone: 2.89509603547
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=1000 C++ standalone: 0.362216843115
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=10000 C++ standalone: 0.0614173832433
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=20000 C++ standalone: 0.0440634627728
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=50000 C++ standalone: 0.0323258939735
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=100000 C++ standalone: 0.0295636812952
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=250000 C++ standalone: 0.0301825412509
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=10 GeNN_optimized: 1.55619035168
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=100 GeNN_optimized: 1.39476926975
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=1000 GeNN_optimized: 1.32290219232
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=10000 GeNN_optimized: 1.19834218479
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=20000 GeNN_optimized: 1.08968345615
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=50000 GeNN_optimized: 0.88300034153
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=100000 GeNN_optimized: 0.76787687807
INFO relative performance for Full examples: Brunel Hakim with scalar delay (1s, no multip pre-post connections) N=250000 GeNN_optimized: 0.4580926795
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_BrunelHakimModelScalarDelayNoMultiPrePost_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:10 for runtime of 0.251194
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
nvprof/nvprof_BrunelHakimModelScalarDelayNoMultiPrePost_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:04 for runtime of 0.194764
Starting VerySparseMediumRateSynapsesOnly on 06.04.2017 at 11:26:46.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Synapses only: Very sparse, medium rate (10s duration):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=500000 [...]INFO: setting cudaDevice stuff took 0.189294 seconds
INFO connectivity matrix has size 32
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 32
INFO: main_lines took 19.422106 seconds
INFO: main function took 19.638434 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 10.000000 
# We are running with fixed time step 0.000100 
9.9999 done ...
everything finished.

Running VerySparseMediumRateSynapsesOnly took 1:34:44.
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=10 CUDA standalone: 1.0
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=100 CUDA standalone: 1.0
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=1000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=10000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=100000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=500000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=10 C++ standalone: 7.46232140337
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=100 C++ standalone: 7.35680132588
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=1000 C++ standalone: 11.8771841425
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=10000 C++ standalone: 5.02984481209
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=100000 C++ standalone: 0.318651307727
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=500000 C++ standalone: 0.0791039271891
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=10 GeNN_optimized: 0.882604947291
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=100 GeNN_optimized: 0.865446555301
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=1000 GeNN_optimized: 1.15609826329
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=10000 GeNN_optimized: 0.847073701942
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=100000 GeNN_optimized: 0.706869490288
INFO relative performance for Synapses only: Very sparse, medium rate (10s duration) N=500000 GeNN_optimized: 0.280107509868
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_VerySparseMediumRateSynapsesOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:30 for runtime of 1.45008
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_VerySparseMediumRateSynapsesOnly_GeNNConfigurationOptimized_1000.log ./main test 10.0 1
Profiling took 0:00:12 for runtime of 1.244563
Starting SparseMediumRateSynapsesOnly on 06.04.2017 at 13:03:04.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Synapses only: Sparse, medium rate (1s duration):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=500000 [...]INFO: setting cudaDevice stuff took 0.337554 seconds
INFO connectivity matrix has size 203
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 203
INFO: main_lines took 2.003913 seconds
INFO: main function took 2.360594 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running SparseMediumRateSynapsesOnly took 1:10:08.
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=10 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=100 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=1000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=10000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=100000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=500000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=10 C++ standalone: 9.03811951624
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=100 C++ standalone: 12.5731575893
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=1000 C++ standalone: 7.14094900056
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=10000 C++ standalone: 0.618089685795
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=100000 C++ standalone: 0.0489483464931
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=500000 C++ standalone: 0.049623428215
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=10 GeNN_optimized: 1.29097406281
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=100 GeNN_optimized: 1.23388192416
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=1000 GeNN_optimized: 1.20240950591
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=10000 GeNN_optimized: 1.07033546948
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=100000 GeNN_optimized: 0.721667335794
INFO relative performance for Synapses only: Sparse, medium rate (1s duration) N=500000 GeNN_optimized: 0.715129849711
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_SparseMediumRateSynapsesOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:04 for runtime of 0.152218
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_SparseMediumRateSynapsesOnly_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:02 for runtime of 0.128374
Starting DenseMediumRateSynapsesOnly on 06.04.2017 at 14:14:07.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Synapses only: Dense, medium rate (1s duration):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=500000 [E..]

TRACEBACK CUDA standalone N=500000
INFO: setting cudaDevice stuff took 0.113374 seconds
INFO connectivity matrix has size 250000000
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
ERROR launching kernel_neurongroup_thresholder_codeobject in code_objects/neurongroup_thresholder_codeobject.cu:1008 invalid argument

('debug syn effect mdoe ', 'target')
INFO: setting cudaDevice stuff took 0.113374 seconds
INFO connectivity matrix has size 250000000
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
ERROR launching kernel_neurongroup_thresholder_codeobject in code_objects/neurongroup_thresholder_codeobject.cu:1008 invalid argument


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)



Running DenseMediumRateSynapsesOnly took 1:52:54.
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=10 CUDA standalone: 1.0
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=100 CUDA standalone: 1.0
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=1000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=10000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=100000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=500000 CUDA standalone: nan
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=10 C++ standalone: 8.7685522422
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=100 C++ standalone: 8.55977504315
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=1000 C++ standalone: 3.94245172467
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=10000 C++ standalone: 0.142538734289
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=100000 C++ standalone: 0.0356173923641
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=500000 C++ standalone: nan
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=10 GeNN_optimized: 1.30697848012
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=100 GeNN_optimized: 1.27150537634
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=1000 GeNN_optimized: 1.26404476027
INFO relative performance for Synapses only: DeINFO: setting cudaDevice stuff took 0.177828 seconds
INFO connectivity matrix has size 1000
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000
INFO: main_lines took 1.945162 seconds
INFO: main function took 2.141915 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
nse, medium rate (1s duration) N=10000 GeNN_optimized: 1.24454603496
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=100000 GeNN_optimized: 1.35448135542
INFO relative performance for Synapses only: Dense, medium rate (1s duration) N=500000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_DenseMediumRateSynapsesOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:04 for runtime of 0.154969
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_DenseMediumRateSynapsesOnly_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.120151
Starting SparseLowRateSynapsesOnly on 06.04.2017 at 16:08:31.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Synapses only: Sparse, low rate (10s duration):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=500000 [...]INFO: setting cudaDevice stuff took 0.315501 seconds
INFO connectivity matrix has size 191
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 191
INFO: main_lines took 18.990017 seconds
INFO: main function took 19.330690 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 10.000000 
# We are running with fixed time step 0.000100 
9.9999 done ...
everything finished.

Running SparseLowRateSynapsesOnly took 1:06:45.
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=10 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=100 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=1000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=10000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=100000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=500000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=10 C++ standalone: 11.3532916318
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=100 C++ standalone: 11.7559788497
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=1000 C++ standalone: 8.13595845714
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=10000 C++ standalone: 2.08954888412
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=100000 C++ standalone: 0.0786977354705
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=500000 C++ standalone: 0.050991577758
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=10 GeNN_optimized: 1.24713089977
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=100 GeNN_optimized: 1.20253101745
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=1000 GeNN_optimized: 1.16650382499
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=10000 GeNN_optimized: 1.13437197572
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=100000 GeNN_optimized: 0.553632482835
INFO relative performance for Synapses only: Sparse, low rate (10s duration) N=500000 GeNN_optimized: 0.521572319612
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_SparseLowRateSynapsesOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:31 for runtime of 1.45718
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_SparseLowRateSynapsesOnly_GeNNConfigurationOptimized_1000.log ./main test 10.0 1
Profiling took 0:00:12 for runtime of 1.260501
Starting SparseHighRateSynapsesOnly on 06.04.2017 at 17:16:49.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Synapses only: Sparse, high rate (1s duration):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=500000 [E..]INFO: setting cudaDevice stuff took 0.143830 seconds
INFO connectivity matrix has size 2030
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 2030
INFO: main_lines took 1.986260 seconds
INFO: main function took 2.148834 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.


TRACEBACK CUDA standalone N=500000
INFO: setting cudaDevice stuff took 0.286275 seconds

('debug syn effect mdoe ', 'target')
INFO: setting cudaDevice stuff took 0.286275 seconds


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
terminate called after throwing an instance of 'thrust::system::detail::bad_alloc'
  what():  std::bad_alloc: out of memory

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)



Running SparseHighRateSynapsesOnly took 3:04:44.
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=10 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=100 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=1000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=10000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=100000 CUDA standalone: 1.0
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=500000 CUDA standalone: nan
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=10 C++ standalone: 13.027787307
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=100 C++ standalone: 8.31720400679
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=1000 C++ standalone: 5.57225034169
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=10000 C++ standalone: 0.42275766627
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=100000 C++ standalone: 0.0495905212469
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=500000 C++ standalone: nan
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=10 GeNN_optimized: 1.29306411522
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=100 GeNN_optimized: 1.23894750575
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=1000 GeNN_optimized: 1.03327020554
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=10000 GeNN_optimized: 1.0713338171
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=100000 GeNN_optimized: 0.743955000458
INFO relative performance for Synapses only: Sparse, high rate (1s duration) N=500000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_SparseHighRateSynapsesOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:04 for runtime of 0.374927
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_SparseHighRateSynapsesOnly_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.362964
Starting STDPNotEventDriven on 06.04.2017 at 20:23:12.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: STDP (not event-driven):  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...]INFO: setting cudaDevice stuff took 0.153160 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 1000
INFO connectivity matrix has size 1000
INFO generating 10000000 rand every 13107 clock cycles for poissongroup_thresholder_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_synapses_stateupdater_codeobject with 2 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 9 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_poissongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 15 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 33 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_synapses_post_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000
Number of synapses: 1000
INFO: main_lines took 6.799618 seconds
INFO: main function took 6.974729 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running STDPNotEventDriven took 0:08:16.
INFO relative performance for Full examples: STDP (not event-driven) N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP (not event-driven) N=10 C++ standalone: 13.4856872038
INFO relative performance for Full examples: STDP (not event-driven) N=100 C++ standalone: 8.68819435966
INFO relative performance for Full examples: STDP (not event-driven) N=1000 C++ standalone: 2.66795987943
INFO relative performance for Full examples: STDP (not event-driven) N=10000 C++ standalone: 0.487504968552
INFO relative performance for Full examples: STDP (not event-driven) N=20000 C++ standalone: 0.335405214753
INFO relative performance for Full examples: STDP (not event-driven) N=50000 C++ standalone: 0.278810141551
INFO relative performance for Full examples: STDP (not event-driven) N=100000 C++ standalone: 0.248035751829
INFO relative performance for Full examples: STDP (not event-driven) N=10 GeNN_optimized: 2.23964192763
INFO relative performance for Full examples: STDP (not event-driven) N=100 GeNN_optimized: 2.14290015959
INFO relative performance for Full examples: STDP (not event-driven) N=1000 GeNN_optimized: 1.86995794984
INFO relative performance for Full examples: STDP (not event-driven) N=10000 GeNN_optimized: 1.30586540569
INFO relative performance for Full examples: STDP (not event-driven) N=20000 GeNN_optimized: 1.1519252236
INFO relative performance for Full examples: STDP (not event-driven) N=50000 GeNN_optimized: 0.970393398749
INFO relative performance for Full examples: STDP (not event-driven) N=100000 GeNN_optimized: 0.923158814456
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPNotEventDriven_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:11 for runtime of 0.459476
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPNotEventDriven_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.244255
Starting STDPMultiPost on 06.04.2017 at 20:32:42.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: STDP with multiple pre- and postsynaptic neurons:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...] n=1000000 [...]INFO: setting cudaDevice stuff took 0.144291 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 961
INFO connectivity matrix has size 961
INFO generating 310000 rand every 422812 clock cycles for poissongroup_thresholder_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 9 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_poissongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 15 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 42 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_synapses_post_codeobject with 15 blocks and 1024 threads. Kernel needs 34 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 961
Number of synapses: 961
INFO: main_lines took 5.925237 seconds
INFO: main function took 6.091588 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running STDPMultiPost took 0:09:20.
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=1000000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=10 C++ standalone: 12.7474018667
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=100 C++ standalone: 11.5913458596
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=1000 C++ standalone: 9.54428741786
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=10000 C++ standalone: 7.34011397663
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=20000 C++ standalone: 4.6434939759
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=50000 C++ standalone: 3.54781164235
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=100000 C++ standalone: 3.07057913489
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=1000000 C++ standalone: 0.10910483462
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=10 GeNN_optimized: 2.81045227011
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=100 GeNN_optimized: 2.74426018098
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=1000 GeNN_optimized: 2.62544842893
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=10000 GeNN_optimized: 2.48962114561
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=20000 GeNN_optimized: 2.45380922669
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=50000 GeNN_optimized: 2.3428861001
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=100000 GeNN_optimized: 2.18909976103
INFO relative performance for Full examples: STDP with multiple pre- and postsynaptic neurons N=1000000 GeNN_optimized: 0.801428258577
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPMultiPost_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:10 for runtime of 0.379254
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPMultiPost_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.142824
Starting STDPNeuronalTraces on 06.04.2017 at 20:43:19.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: STDP with traces in neurons:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...] n=1000000 [...]INFO: setting cudaDevice stuff took 0.176256 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 1000
INFO connectivity matrix has size 1000
INFO generating 10000000 rand every 13107 clock cycles for neurongroup_thresholder_codeobject
INFO calling kernel_neurongroup_1_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_1_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 9 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 15 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 31 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_post_codeobject with 15 blocks and 1024 threads. Kernel needs 28 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_1_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000
Number of synapses: 1000
INFO: main_lines took 6.268831 seconds
INFO: main function took 6.467315 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running STDPNeuronalTraces took 0:14:08.
INFO relative performance for Full examples: STDP with traces in neurons N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=1000000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with traces in neurons N=10 C++ standalone: 11.6440202443
INFO relative performance for Full examples: STDP with traces in neurons N=100 C++ standalone: 8.66784869976
INFO relative performance for Full examples: STDP with traces in neurons N=1000 C++ standalone: 2.18593367648
INFO relative performance for Full examples: STDP with traces in neurons N=10000 C++ standalone: 0.621996996463
INFO relative performance for Full examples: STDP with traces in neurons N=20000 C++ standalone: 0.439453583339
INFO relative performance for Full examples: STDP with traces in neurons N=50000 C++ standalone: 0.385339081617
INFO relative performance for Full examples: STDP with traces in neurons N=100000 C++ standalone: 0.355185290586
INFO relative performance for Full examples: STDP with traces in neurons N=1000000 C++ standalone: 0.288422965605
INFO relative performance for Full examples: STDP with traces in neurons N=10 GeNN_optimized: 2.95565780195
INFO relative performance for Full examples: STDP with traces in neurons N=100 GeNN_optimized: 2.81320236796
INFO relative performance for Full examples: STDP with traces in neurons N=1000 GeNN_optimized: 2.48979624527
INFO relative performance for Full examples: STDP with traces in neurons N=10000 GeNN_optimized: 1.74573261233
INFO relative performance for Full examples: STDP with traces in neurons N=20000 GeNN_optimized: 1.53949294157
INFO relative performance for Full examples: STDP with traces in neurons N=50000 GeNN_optimized: 1.27630217316
INFO relative performance for Full examples: STDP with traces in neurons N=100000 GeNN_optimized: 1.20707261203
INFO relative performance for Full examples: STDP with traces in neurons N=1000000 GeNN_optimized: 1.15485155451
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPNeuronalTraces_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:12 for runtime of 0.465582
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPNeuronalTraces_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.186743
Starting STDPMultiPostNeuronalTraces on 06.04.2017 at 20:58:43.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: STDP with multiple postsynaptic neurons and traces in neurons:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [...] n=1000000 [...]INFO: setting cudaDevice stuff took 0.186410 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 961
INFO connectivity matrix has size 961
INFO generating 310000 rand every 422812 clock cycles for neurongroup_thresholder_codeobject
INFO calling kernel_neurongroup_1_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_1_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 9 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 15 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 31 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_post_codeobject with 15 blocks and 1024 threads. Kernel needs 28 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_1_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 961
Number of synapses: 961
INFO: main_lines took 6.372802 seconds
INFO: main function took 6.581250 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running STDPMultiPostNeuronalTraces took 0:08:49.
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=1000000 CUDA standalone: 1.0
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=10 C++ standalone: 11.2776436504
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=100 C++ standalone: 11.2039193789
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=1000 C++ standalone: 10.2038728186
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=10000 C++ standalone: 8.2861849847
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=20000 C++ standalone: 7.36851429155
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=50000 C++ standalone: 6.35608139671
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=100000 C++ standalone: 4.82692286419
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=1000000 C++ standalone: 0.603177630071
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=10 GeNN_optimized: 2.94135590849
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=100 GeNN_optimized: 2.95301604211
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=1000 GeNN_optimized: 2.90776556826
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=10000 GeNN_optimized: 2.78124403426
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=20000 GeNN_optimized: 2.82306874025
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=50000 GeNN_optimized: 2.77392207329
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=100000 GeNN_optimized: 2.67728338099
INFO relative performance for Full examples: STDP with multiple postsynaptic neurons and traces in neurons N=1000000 GeNN_optimized: 2.1046509768
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPMultiPostNeuronalTraces_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:12 for runtime of 0.422016
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_STDPMultiPostNeuronalTraces_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.146966
Starting BrunelHakimModelHeterogeneousDelay on 06.04.2017 at 21:08:46.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: Brunel Hakim with heterogenous delays:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=20000 [...] n=50000 [...] n=100000 [E..]

TRACEBACK CUDA standalone N=100000
INFO: setting cudaDevice stuff took 0.094517 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 97661 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 100004409
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO generating 204687 randn every 131 clock cycles for neurongroup_stateupdater_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 174 blocks and 576 threads. Kernel needs 52 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.562500.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1051 out of memory

('debug syn effect mdoe ', 'target')
INFO: setting cudaDevice stuff took 0.094517 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 97661 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 100004409
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO not enough memory available to generate 247808 random numbers for neurongroup_stateupdater_codeobject, reducing the buffer size
INFO generating 204687 randn every 131 clock cycles for neurongroup_stateupdater_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 174 blocks and 576 threads. Kernel needs 52 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.562500.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1051 out of memory


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.07s, trying other methods took 0.00s). [brian2.stateupdaters.base.method_choice]
terminINFO: setting cudaDevice stuff took 0.179905 seconds
INFO calling kernel_synapses_group_variable_set_conditional_codeobject with 977 blocks and 1024 threads. Kernel needs 6 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 1000000
INFO generating 10000000 randn every 13107 clock cycles for neurongroup_stateupdater_codeobject
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 576 threads. Kernel needs 52 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.562500.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 1000000
INFO: main_lines took 9.590645 seconds
INFO: main function took 9.829623 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
ate called after throwing an instance of 'thrust::system::system_error'
  what():  cudaFree in free: an illegal memory access was encountered

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)



Running BrunelHakimModelHeterogeneousDelay took 1:11:22.
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=100000 CUDA standalone: nan
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=10 C++ standalone: 11.4029279828
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=100 C++ standalone: 8.7440567782
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=1000 C++ standalone: 5.15311757921
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=10000 C++ standalone: 6.3911140671
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=20000 C++ standalone: 12.3422729105
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=50000 C++ standalone: 15.0350916602
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=100000 C++ standalone: nan
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=10 GeNN_optimized: 2.23856530406
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=100 GeNN_optimized: 4.36762611789
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=1000 GeNN_optimized: 20.15374328
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=10000 GeNN_optimized: 146.679676807
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=20000 GeNN_optimized: 357.995725987
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=50000 GeNN_optimized: 492.68840486
INFO relative performance for Full examples: Brunel Hakim with heterogenous delays N=100000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_BrunelHakimModelHeterogeneousDelay_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:15 for runtime of 3.81853
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_BrunelHakimModelHeterogeneousDelay_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:04 for runtime of 0.188529
Starting LinearNeuronsOnly on 06.04.2017 at 22:21:28.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Neurons only: Linear 1D:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=1000000 [...] n=10000000 [...]INFO: setting cudaDevice stuff took 0.326520 seconds
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 1024 threads. Kernel needs 12 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 0 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO: main_lines took 5.766263 seconds
INFO: main function took 6.105103 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 10.000000 
# We are running with fixed time step 0.000100 
9.9999 done ...
everything finished.

Running LinearNeuronsOnly took 0:33:02.
INFO relative performance for Neurons only: Linear 1D N=10 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=100 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=1000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=10000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=100000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=1000000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=10000000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Linear 1D N=10 C++ standalone: 7.51083775606
INFO relative performance for Neurons only: Linear 1D N=100 C++ standalone: 6.6944353215
INFO relative performance for Neurons only: Linear 1D N=1000 C++ standalone: 3.76942753323
INFO relative performance for Neurons only: Linear 1D N=10000 C++ standalone: 0.799040137212
INFO relative performance for Neurons only: Linear 1D N=100000 C++ standalone: 0.144238328209
INFO relative performance for Neurons only: Linear 1D N=1000000 C++ standalone: 0.104833409762
INFO relative performance for Neurons only: Linear 1D N=10000000 C++ standalone: 0.0490665649822
INFO relative performance for Neurons only: Linear 1D N=10 GeNN_optimized: 0.973583595511
INFO relative performance for Neurons only: Linear 1D N=100 GeNN_optimized: 0.984380282075
INFO relative performance for Neurons only: Linear 1D N=1000 GeNN_optimized: 1.0333623878
INFO relative performance for Neurons only: Linear 1D N=10000 GeNN_optimized: 0.907366342055
INFO relative performance for Neurons only: Linear 1D N=100000 GeNN_optimized: 0.65065534916
INFO relative performance for Neurons only: Linear 1D N=1000000 GeNN_optimized: 0.603726581657
INFO relative performance for Neurons only: Linear 1D N=10000000 GeNN_optimized: 0.583361983096
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_LinearNeuronsOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:10 for runtime of 0.48209
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_LinearNeuronsOnly_GeNNConfigurationOptimized_1000.log ./main test 10.0 1
Profiling took 0:00:06 for runtime of 0.45749
Starting HHNeuronsOnly on 06.04.2017 at 22:55:24.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Neurons only: Hodgkin-Huxley:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=1000000 [...]INFO: setting cudaDevice stuff took 0.143355 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 7 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 0 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 1024 threads. Kernel needs 62 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 0 bytes of user-allocated constant memory. Theoretical occupancy is 0.500000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 0 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO: main_lines took 1.875142 seconds
INFO: main function took 2.032155 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running HHNeuronsOnly took 0:21:09.
INFO relative performance for Neurons only: Hodgkin-Huxley N=10 CUDA standalone: 1.0
INFO relative performance for Neurons only: Hodgkin-Huxley N=100 CUDA standalone: 1.0
INFO relative performance for Neurons only: Hodgkin-Huxley N=1000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Hodgkin-Huxley N=10000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Hodgkin-Huxley N=100000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Hodgkin-Huxley N=1000000 CUDA standalone: 1.0
INFO relative performance for Neurons only: Hodgkin-Huxley N=10 C++ standalone: 8.88708231981
INFO relative performance for Neurons only: Hodgkin-Huxley N=100 C++ standalone: 1.93233246921
INFO relative performance for Neurons only: Hodgkin-Huxley N=1000 C++ standalone: 0.273829639851
INFO relative performance for Neurons only: Hodgkin-Huxley N=10000 C++ standalone: 0.0301623262336
INFO relative performance for Neurons only: Hodgkin-Huxley N=100000 C++ standalone: 0.0140154114169
INFO relative performance for Neurons only: Hodgkin-Huxley N=1000000 C++ standalone: 0.0117289494235
INFO relative performance for Neurons only: Hodgkin-Huxley N=10 GeNN_optimized: 1.17820348169
INFO relative performance for Neurons only: Hodgkin-Huxley N=100 GeNN_optimized: 1.1193610315
INFO relative performance for Neurons only: Hodgkin-Huxley N=1000 GeNN_optimized: 1.40084936828
INFO relative performance for Neurons only: Hodgkin-Huxley N=10000 GeNN_optimized: 1.15423786453
INFO relative performance for Neurons only: Hodgkin-Huxley N=100000 GeNN_optimized: 1.03595178005
INFO relative performance for Neurons only: Hodgkin-Huxley N=1000000 GeNN_optimized: 0.955525776817
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_HHNeuronsOnly_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:04 for runtime of 0.251227
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_HHNeuronsOnly_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:02 for runtime of 0.179052
Starting VogelsWithSynapticDynamic on 06.04.2017 at 23:17:20.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: Vogels et al 2011 (not event-driven synapses):  n=10 [E.E] n=100 [..E] n=1000 [..E] n=10000 [..E] n=20000 [..E] n=50000 [..E] n=100000 [E.E]

TRACEBACK CUDA standalone N=10
INFO: setting cudaDevice stuff took 0.268672 seconds
INFO connectivity matrix has size 1
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_synapses_2_stateupdater_codeobject with 0 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_synapses_2_stateupdater_codeobject in code_objects/synapses_2_stateupdater_codeobject.cu:1044 invalid configuration argument

('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'synapse')
INFO: setting cudaDevice stuff took 0.268672 seconds
INFO connectivity matrix has size 1
INFO calling kernel_neurongroup_stateupdater_codeobject with 1 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_synapses_2_stateupdater_codeobject with 0 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_synapses_2_stateupdater_codeobject in code_objects/synapses_2_stateupdater_codeobject.cu:1044 invalid configuration argument


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.12s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.14s). [brian2.stateupdaters.base.method_choice]

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)




TRACEBACK GeNN_optimized N=10
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 0.000654 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.11s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.15s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_000066aa_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.




TRACEBACK GeNN_optimized N=100
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 0.006504 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.07s, trying other methods took 0.14s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.13s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_00006ab9_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.




TRACEBACK GeNN_optimized N=1000
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 0.065004 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.07s, trying other methods took 0.12s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.16s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_00006ee5_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.




TRACEBACK GeNN_optimized N=10000
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 0.650004 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.14s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.13s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_0000733c_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.




TRACEBACK GeNN_optimized N=20000
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 1.3 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.07s, trying other methods took 0.17s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.14s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_0000782e_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.




TRACEBACK GeNN_optimized N=50000
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 3.25 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.12s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.14s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_00000209_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+level)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.




TRACEBACK CUDA standalone N=100000
INFO: setting cudaDevice stuff took 0.256535 seconds
INFO connectivity matrix has size 7999692
INFO connectivity matrix has size 32002251
INFO connectivity matrix has size 160017025
INFO connectivity matrix has size 32002251
INFO calling kernel_neurongroup_stateupdater_codeobject with 131 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1066 invalid argument

('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'synapse')
INFO: setting cudaDevice stuff took 0.256535 seconds
INFO connectivity matrix has size 7999692
INFO connectivity matrix has size 32002251
INFO connectivity matrix has size 160017025
INFO connectivity matrix has size 32002251
INFO calling kernel_neurongroup_stateupdater_codeobject with 131 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1066 invalid argument


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.12s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.19s). [brian2.stateupdaters.base.method_choice]

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)




TRACEBACK GeNN_optimized N=100000
no stdout file found, cwd = /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNWorkspace/results/stdout.txt
running brian code generation ...
building genn executable ...
ar -rcs /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib/libgenn.a /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/global.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/modelSpec.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/neuronModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/synapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/postSynapseModels.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/utils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/stringUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/sparseUtils.o /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/obj/hr_time.o
g++ -std=c++11 -DNVCC=\""/usr/local/cuda/bin/nvcc"\" -DMODEL=\"/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model.cpp\" -o /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/generateALL /home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generate*.cc -I"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/include" -I"/usr/local/cuda/include" -L"/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/lib" -L"/usr/local/cuda/lib64" -lgenn -lcuda -lcudart
call was ./generateALL /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace 
optimizing block size...
Global memory required for core model: 6.5 MB. 
6440894464 for device 0
dry-run compile for device 0
"/usr/local/cuda/bin/nvcc" -cubin -x cu -arch sm_35 -O3 -I"$GENN_PATH/lib/include" -o "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/runner.cubin" "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/runner.cc"
genn-buildmodel.sh:70: error 50: command failure

/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       The synaptic equation for the variable A_pre does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
INFO       The synaptic equation for the variable A_post does not specify whether it should be integrated at every timestep ("clock-driven") or only at spiking events ("event-driven"). It will be integrated at every timestep which can slow down your simulation unnecessarily if you only need the values of this variable whenever a spike occurs. Specify the equation as clock-driven explicitly to avoid this warning. [brian2.synapses.synapses.clock_driven]
WARNING    The selected device 'genn' only supports a fixed schedule, but this schedule is not consistent with the network's schedule. The simulation will use the device's schedule.
Device schedule: ['start', 'synapses', 'groups', 'thresholds', 'resets', 'end']
Network schedule: ['start', 'groups', 'thresholds', 'synapses', 'resets', 'end']
Set the network schedule explicitly or set the core.network.default_schedule preference to avoid this warning. [brian2.core.network.schedule_conflict]
INFO       No numerical integration method specified for group 'neurongroup', using method 'euler' (took 0.06s, trying other methods took 0.11s). [brian2.stateupdaters.base.method_choice]
INFO       No numerical integration method specified for group 'synapses_2', using method 'linear' (took 0.20s). [brian2.stateupdaters.base.method_choice]
/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/GeNNworkspace/magicnetwork_model_CODE/synapseKrnl.cc(23): error: name must be a namespace name

1 error detected in the compilation of "/tmp/tmpxft_00001531_00000000-7_runner.cpp1.ii".
/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/genn/lib/src/generateALL.cc: 258: cuda driver error 301: CUDA_ERROR_FILE_NOT_FOUND

Traceback (most recent call last):
  File "<string>", line 14, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/speed.py", line 1075, in run
    self.timed_run(self.duration)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/tests/features/base.py", line 63, in timed_run
    brian2.run(duration, level=1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/units/fundamentalunits.py", line 2428, in new_f
    result = f(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 371, in run
    namespace=namespace, profile=profile, level=2+leINFO: setting cudaDevice stuff took 0.170318 seconds
INFO connectivity matrix has size 812
INFO connectivity matrix has size 3241
INFO connectivity matrix has size 16057
INFO connectivity matrix has size 3241
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 768 threads. Kernel needs 40 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_synapses_2_stateupdater_codeobject with 5 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_1_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_2_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 31 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_2_post_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 3241
Number of synapses: 3241
Number of synapses: 16057
Number of synapses: 812
INFO: main_lines took 8.665926 seconds
INFO: main function took 8.864357 seconds
vel)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/magic.py", line 231, in run
    namespace=namespace, profile=profile, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/core/base.py", line 276, in device_override_decorated_function
    return getattr(curdev, name)(*args, **kwds)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 1206, in network_run
    super(GeNNDevice, self).network_run(net=net, duration=duration, report=report, report_period=report_period, namespace=namespace, level=level+1)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 1171, in network_run
    self.build(direct_call=False, **self.build_options)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2genn/brian2genn/device.py", line 582, in build
    returncode=ex.returncode)
RuntimeError: Project compilation failed (Command ['genn-buildmodel.sh', 'magicnetwork_model.cpp'] failed with error code 50).
See the output above (if any) for more details.



Running VogelsWithSynapticDynamic took 1:02:13.
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=10 CUDA standalone: nan
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=20000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=100000 CUDA standalone: nan
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=10 C++ standalone: nan
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=100 C++ standalone: 8.86897457548
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=1000 C++ standalone: 4.54459720371
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=10000 C++ standalone: 1.30294701267
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=20000 C++ standalone: 0.533376382918
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=50000 C++ standalone: 0.285758703759
INFO relative performance for Full examples: Vogels et al 2011 (not event-driven synapses) N=100000 C++ standalone: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_VogelsWithSynapticDynamic_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:15 for runtime of 0.894734
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
Starting CUBAFixedConnectivity on 07.04.2017 at 00:20:43.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: CUBA fixed connectivity:  n=10 [...] n=100 [...] n=1000 [...] n=10000 [...] n=100000 [...] n=1000000 [E..]

TRACEBACK CUDA standalone N=1000000
INFO: setting cudaDevice stuff took 0.269366 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 977 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 15997784
INFO connectivity matrix has size 63997779
INFO calling kernel_neurongroup_stateupdater_codeobject with 1303 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1101 invalid argument

('debug syn effect mdoe ', 'target')
('debug syn effect mdoe ', 'target')
INFO: setting cudaDevice stuff took 0.269366 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 977 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 15997784
INFO connectivity matrix has size 63997779
INFO calling kernel_neurongroup_stateupdater_codeobject with 1303 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
ERROR launching kernel_neurongroup_stateupdater_codeobject in code_objects/neurongroup_stateupdater_codeobject.cu:1101 invalid argument


/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/utils/logger.py:546: UserWarning: Could not copy script file to temp directory: [Errno 2] No such file or directory: '/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/-c'
  'Could not copy script file to temp directory: %s' % ex)
INFO       No numerical integration method specified for group 'neurongroup', using method 'linear' (took 1.52s). [brian2.stateupdaters.base.method_choice]

Traceback (most recent call last):
  File "<string>", line 21, in <module>
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/tests/features/cuda_configuration.py", line 27, in after_run
    with_output=False)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/brian2cuda/device.py", line 778, in build
    self.run(directory, with_output, run_args)
  File "/mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/frozen_repos/brian2/brian2/devices/cpp_standalone/device.py", line 864, in run
    "%s)" % os.path.abspath(directory))
RuntimeError: Project run failed (project directory: /mnt/antares_raid/home/denisalevi/projects/dev_brian2cuda/brian2cuda_repo/dev/benchmarks/cuda_standalone/cuda_standalone)



Running CUBAFixedConnectivity took 2:08:42.
INFO relative performance for Full examples: CUBA fixed connectivity N=10 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: CUBA fixed connectivity N=1000000 CUDA standalone: nan
INFO relative performance for Full examples: CUBA fixed connectivity N=10 C++ standalone: 10.4753271459
INFO relative performance for Full examples: CUBA fixed connectivity N=100 C++ standalone: 9.11815288259
INFO relative performance for Full examples: INFO: setting cudaDevice stuff took 0.159560 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 8 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 15885
INFO connectivity matrix has size 63887
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 768 threads. Kernel needs 36 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.750000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_spikemonitor_codeobject with 1 blocks and 1 threads. Kernel needs 37 registers per block, 0 bytes of statically-allocated shared memory per block, 16 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.000000.
INFO calling kernel_synapses_1_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_neurongroup_resetter_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 63887
Number of synapses: 15885
INFO: main_lines took 6.371682 seconds
Number of spikes: 5793
INFO: main function took 6.564151 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.
CUBA fixed connectivity N=1000 C++ standalone: 4.59531396439
INFO relative performance for Full examples: CUBA fixed connectivity N=10000 C++ standalone: 1.31468051433
INFO relative performance for Full examples: CUBA fixed connectivity N=100000 C++ standalone: 1.18548470084
INFO relative performance for Full examples: CUBA fixed connectivity N=1000000 C++ standalone: nan
INFO relative performance for Full examples: CUBA fixed connectivity N=10 GeNN_optimized: 1.11042839814
INFO relative performance for Full examples: CUBA fixed connectivity N=100 GeNN_optimized: 1.04833449905
INFO relative performance for Full examples: CUBA fixed connectivity N=1000 GeNN_optimized: 1.04557236752
INFO relative performance for Full examples: CUBA fixed connectivity N=10000 GeNN_optimized: 1.50988461982
INFO relative performance for Full examples: CUBA fixed connectivity N=100000 GeNN_optimized: 1.45615031203
INFO relative performance for Full examples: CUBA fixed connectivity N=1000000 GeNN_optimized: nan
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_CUBAFixedConnectivity_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:12 for runtime of 0.436839
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_CUBAFixedConnectivity_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:03 for runtime of 0.414081
Starting COBAHHFixedConnectivity on 07.04.2017 at 02:30:45.
Running speed tests
Configurations: CUDA standalone, C++ standalone, GeNN_optimized
Full examples: COBAHH fixed connectivity:  n=100 [...] n=500 [...] n=1000 [...] n=5000 [...] n=10000 [...] n=50000 [...] n=100000 [...] n=500000 [...]INFO: setting cudaDevice stuff took 0.332072 seconds
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject with 1 blocks and 1024 threads. Kernel needs 14 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_1 with 1 blocks and 1024 threads. Kernel needs 7 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO calling kernel_neurongroup_group_variable_set_conditional_codeobject_2 with 1 blocks and 1024 threads. Kernel needs 7 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory
INFO connectivity matrix has size 15964
INFO connectivity matrix has size 64222
INFO calling kernel_neurongroup_stateupdater_codeobject with 2 blocks and 512 threads. Kernel needs 109 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.250000.
INFO calling kernel_neurongroup_thresholder_codeobject with 1 blocks and 1024 threads. Kernel needs 11 registers per block, 0 bytes of statically-allocated shared memory per block, 0 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_spikemonitor_codeobject with 1 blocks and 1 threads. Kernel needs 37 registers per block, 0 bytes of statically-allocated shared memory per block, 16 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 0.000000.
INFO calling kernel_synapses_1_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
INFO calling kernel_synapses_pre_codeobject with 15 blocks and 1024 threads. Kernel needs 27 registers per block, 0 bytes of statically-allocated shared memory per block, 8 bytes of local memory per thread and a total of 256 bytes of user-allocated constant memory. Theoretical occupancy is 1.000000.
Number of synapses: 15964
Number of synapses: 64222
INFO: main_lines took 6.054959 seconds
Number of spikes: 37082
INFO: main function took 6.485835 seconds
mkdir: cannot create directory ‘test_output’: File exists
# DT 0.000100 
# totalTime 1.000000 
# We are running with fixed time step 0.000100 
0.9999 done ...
everything finished.

Running COBAHHFixedConnectivity took 2:02:00.
INFO relative performance for Full examples: COBAHH fixed connectivity N=100 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=500 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=1000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=5000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=10000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=50000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=100000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=500000 CUDA standalone: 1.0
INFO relative performance for Full examples: COBAHH fixed connectivity N=100 C++ standalone: 1.08329904788
INFO relative performance for Full examples: COBAHH fixed connectivity N=500 C++ standalone: 0.396811267606
INFO relative performance for Full examples: COBAHH fixed connectivity N=1000 C++ standalone: 0.263636826134
INFO relative performance for Full examples: COBAHH fixed connectivity N=5000 C++ standalone: 0.156838480711
INFO relative performance for Full examples: COBAHH fixed connectivity N=10000 C++ standalone: 0.144342764605
INFO relative performance for Full examples: COBAHH fixed connectivity N=50000 C++ standalone: 0.124221429972
INFO relative performance for Full examples: COBAHH fixed connectivity N=100000 C++ standalone: 0.125880488867
INFO relative performance for Full examples: COBAHH fixed connectivity N=500000 C++ standalone: 1.77958110994
INFO relative performance for Full examples: COBAHH fixed connectivity N=100 GeNN_optimized: 0.849264812988
INFO relative performance for Full examples: COBAHH fixed connectivity N=500 GeNN_optimized: 1.14449843751
INFO relative performance for Full examples: COBAHH fixed connectivity N=1000 GeNN_optimized: 1.29478794328
INFO relative performance for Full examples: COBAHH fixed connectivity N=5000 GeNN_optimized: 2.10583634597
INFO relative performance for Full examples: COBAHH fixed connectivity N=10000 GeNN_optimized: 2.64633239801
INFO relative performance for Full examples: COBAHH fixed connectivity N=50000 GeNN_optimized: 2.23178989574
INFO relative performance for Full examples: COBAHH fixed connectivity N=100000 GeNN_optimized: 1.21355706552
INFO relative performance for Full examples: COBAHH fixed connectivity N=500000 GeNN_optimized: 3.68221005988
Rerunning CUDAStandaloneConfiguration with n = 1000 for nvprof profiling
cd cuda_standalone && nvprof --profile-from-start-off --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_COBAHHFixedConnectivity_CUDAStandaloneConfiguration_1000.log ./main 
Profiling took 0:00:11 for runtime of 0.881464
Rerunning GeNNConfigurationOptimized with n = 1000 for nvprof profiling
cd GeNNworkspace && nvprof  --log-file ../results_2017_04_05_complete_after_talk/nvprof/nvprof_COBAHHFixedConnectivity_GeNNConfigurationOptimized_1000.log ./main test 1.0 1
Profiling took 0:00:04 for runtime of 0.6583

Summarized speed test results in results_2017_04_05_complete_after_talk/README.md
Finished speed test on 07.04.2017 at 04:34:29. Total time = 1 day, 6:30:58.
